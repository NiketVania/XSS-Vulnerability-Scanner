#!/usr/bin/env python

import re # regular expression
import requests # to make http request
import urlparse # to combine and break url into components & to convert relative url into absolute url
from BeautifulSoup import BeautifulSoup # to parse html and xml documents


class Scanner:  
    def __init__(self, url, ignore_links):
        self.session = requests.Session() # request session
        self.target_url = url
        self.target_links = []
        self.links_to_ignore = ignore_links
    
    def extract_links_from(self, url):
        response = self.session.get(url)
        # extract only hyperlinks from <a> tag
        return re.findall(' (?:href=")(.*?)"', response.content)
    
    def crawl(self, url=None):
        if url == None:
            url = self.target_url
        
        href_links = self.extract_links_from(url)
        
        for link in href_links:
            # urlparse.urljoin will convert relative path into full path
            link = urlparse.urljoin(url, link)

            # unique links before hash sign will be added to link
            if "#" in link:
                link = link.split("#")[0]

            # this will add unique links to target_links for the crawler
            if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
                self.target_links.append(link)
                print(link)
                self.crawl(link) # will call itself till every link of the website is covered
    
    def extract_forms(self, url):
        response = self.session.get(url)
        # get html code from the page, it will return object of beautifulsoup.
        # from it we can find specific thing like form
        parsed_html = BeautifulSoup(response.content)
        return parsed_html.findAll("form")

    def submit_form(self, form, value, url):
        # extract action parameter value from form
        action = form.get("action")
        post_url = urlparse.urljoin(url, action) # action will be of relative so we use urljoin to get full url
        method = form.get("method")

        inputs_list = form.findAll("input") # find input tags from form
        post_data = {}

        for input in inputs_list:
            inputs_name = input.get("name") # extract value of name parameter from input tag
            inputs_type = input.get("type")
            inputs_value = input.get("value")

            if inputs_type == "text":
                inputs_value = value
            
            post_data[inputs_name] = inputs_value

        # send post request using post_data dictionary
        if method == "post":
            return self.session.post(post_url, data=post_data)

        return self.session.get(post_url, params=post_data)

    def run_scanner(self):
        for link in self.target_links:
            forms = self.extract_forms(link) # get all the forms by calling method

            # test form 
            for form in forms:
                print("[+] Testing form in " + link)
                is_vulnerable_to_xss = self.test_xss_in_form(form, link)

                if is_vulnerable_to_xss:
                    print("\n\n[***] XSS discoverd in " + link + " in the following form")
                    print(form)
            
            # test link
            if "=" in link:
                print("[+] Testing " + link)
                is_vulnerable_to_xss = self.test_xss_in_link(link)

                if is_vulnerable_to_xss:
                    print("[***] Discovered XSS in " + link)

    def test_xss_in_link(self, url):
        # tests for xss in link
        xss_test_script = "<sCript>alert('test')</scriPt>" # payload
        url = url.replace("=", "=" + xss_test_script) # replace = with = and payload
        response = self.session.get(url)

        return xss_test_script in response.content
        
    def test_xss_in_form(self, form, url):
        # test for xss in form
        xss_test_script = "<sCript>alert('test')</scriPt>" # payload
        response = self.submit_form(form, xss_test_script, url)
        
        return xss_test_script in response.content
